name: cicd

on:
  push:
    branches:
      - dev
      - master

    tags:
      - v*

  pull_request:

env:
  IMAGE_NAME: frontend

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm install
      - run: npm run build --if-present
      - run: npm test
        env:
          CI: true

      - name: test
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

      - name: Build image
        if: github.event_name == 'push'
        run: docker build . --file Dockerfile --tag image

      - name: Log into registry
        if: github.event_name == 'push'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        if: github.event_name == 'push'
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention for master branch
          [ "$VERSION" == "master" ] && VERSION=latest-${{ github.sha }}
          # Use Docker `dev` tag convention for dev branch
          [ "$VERSION" == "dev" ] && VERSION=dev-${{ github.sha }}
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: K8S set context
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig:  ${{ secrets.K8S_Context }}
        id: setcontext  

      - name: K8S create secret
        uses: Azure/k8s-create-secret@v1
        with:
          container-registry-url: docker.pkg.github.com
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: github-k8s-secret

      - name: K8S deploy
        uses: Azure/k8s-deploy@v1
        with:
            namespace: 'default'
            manifests: |
              manifests/fe-deployment.yaml
              manifests/fe-service.taml
            images: |
              docker.pkg.github.com/wuhan-support/frontend/frontend:latest-${{ github.sha }}
            imagepullsecrets: |
              github-k8s-secret
            kubectl-version: 'latest'